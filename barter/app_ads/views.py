from typing import Optional

from django.contrib import messages
from django.contrib.auth.mixins import LoginRequiredMixin
from django.core.exceptions import ObjectDoesNotExist, PermissionDenied
from django.db.models import QuerySet
from django.http import Http404
from django.shortcuts import redirect, get_object_or_404
from django.urls import reverse_lazy, reverse
from django.views.generic import CreateView, ListView, UpdateView, DetailView, DeleteView

from app_ads import forms, models


class AdsCreate(LoginRequiredMixin, CreateView):
    """–ö–ª–∞—Å—Å-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞."""

    template_name = "ads/ads_form.html"
    form_class = forms.AdsItemForm
    success_url = reverse_lazy('main')
    extra_context = {
        "categories": models.AdsItem.CATEGORY_CHOICES,
        "conditions": models.AdsItem.CONDITION_CHOICES,
        "title": "–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
    }

    def form_valid(self, form):
        form.instance.user = self.request.user
        return super().form_valid(form)


class AdsList(ListView):
    """–ö–ª–∞—Å—Å-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤."""
    model = models.AdsItem
    template_name = "ads/ads_list.html"
    paginate_by = 5
    extra_context = {
        "title": "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤",
        "empty_message": "–¢—É—Ç –Ω–∏—á–µ–≥–æ –Ω–µ—Ç üôÅ"
    }

    def get_queryset(self) -> QuerySet[models.AdsItem]:
        """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î."""
        try:
            if self.request.user.is_authenticated:
                object_list = (models.AdsItem.objects
                               .exclude(user=self.request.user)
                               .order_by("-created_at"))
            else:
                object_list = (models.AdsItem.objects
                               .order_by("-created_at"))
            return object_list
        except ObjectDoesNotExist:
            raise Http404("–û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç")


class AdsUserList(LoginRequiredMixin, AdsList):
    """–ö–ª–∞—Å—Å-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    model = models.AdsItem
    template_name = "ads/ads_list.html"
    paginate_by = 5
    extra_context = {
        "title": "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤",
        "empty_message": "–¢—É—Ç –Ω–∏—á–µ–≥–æ –Ω–µ—Ç üôÅ"
    }

    def get_queryset(self) -> QuerySet[models.AdsItem]:
        """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î."""
        try:
            return (models.AdsItem.objects
                    .filter(user=self.request.user)
                    .order_by("-created_at"))
        except ObjectDoesNotExist:
            raise Http404("–û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç")


class AdsDetail(DetailView):
    model = models.AdsItem
    template_name = "ads/ads_detail.html"


class AdsUpdate(UpdateView):
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    model = models.AdsItem
    form_class = forms.AdsItemForm
    template_name = 'ads/ads_form.html'

    extra_context = {
        "title": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
        "categories": models.AdsItem.CATEGORY_CHOICES,
        "conditions": models.AdsItem.CONDITION_CHOICES
    }

    def get_object(self, queryset=None):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞."""
        obj = get_object_or_404(models.AdsItem, pk=self.kwargs.get('pk'))
        if obj.user != self.request.user:
            raise PermissionDenied("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
        return obj

    def form_valid(self, form):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã."""
        form.instance.user = self.request.user
        return super().form_valid(form)

    def get_context_data(self, **kwargs):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        context = super().get_context_data(**kwargs)
        context.update(self.extra_context)
        return context


class AdsDelete(LoginRequiredMixin, DeleteView):
    model = models.AdsItem
    template_name = 'ads/ads_confirm_delete.html'
    success_url = reverse_lazy('app_ads:list_user')

    def get_object(self, queryset=None):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"""
        obj = get_object_or_404(models.AdsItem, pk=self.kwargs.get('pk'))
        if obj.user != self.request.user:
            raise PermissionDenied("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
        return obj

    def delete(self, request, *args, **kwargs):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏"""
        response = super().delete(request, *args, **kwargs)
        messages.success(request, '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ')
        return response

    def get_context_data(self, **kwargs):
        """–î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        context = super().get_context_data(**kwargs)
        context['title'] = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è'
        return context
