from django.contrib import messages
from django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin, PermissionRequiredMixin
from django.core.exceptions import PermissionDenied
from django.db.models import QuerySet
from django.shortcuts import get_object_or_404
from django.urls import reverse_lazy
from django.views import generic

from app_ads import forms, models, services


class AdsCreate(LoginRequiredMixin, generic.CreateView):
    """–ö–ª–∞—Å—Å-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞."""

    template_name = "ads/ads_form.html"
    form_class = forms.AdsItemForm
    success_url = reverse_lazy('main')
    extra_context = {
        "categories": models.AdsItem.CATEGORY_CHOICES,
        "conditions": models.AdsItem.CONDITION_CHOICES,
        "title": "–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
    }

    def form_valid(self, form):
        form.instance.user = self.request.user
        messages.add_message(self.request, messages.SUCCESS, '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ')
        return super().form_valid(form)


class BaseAdsListView(generic.ListView):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    model = models.AdsItem
    template_name = "ads/ads_list.html"
    paginate_by = 5
    is_mine = False

    @staticmethod
    def get_extra_context():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Å–ø–∏—Å–∫–∞"""
        return {
            "categories": models.AdsItem.CATEGORY_CHOICES,
            "conditions": models.AdsItem.CONDITION_CHOICES,
            "empty_message": "–¢—É—Ç –Ω–∏—á–µ–≥–æ –Ω–µ—Ç üôÅ"
        }

    def get_filter_params(self) -> services.AdsFilterParams:
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞"""
        return services.AdsFilterParams(
            user=self.request.user,
            is_mine=self.is_mine,
            search_query=self.request.GET.get("search", ""),
            category_query=self.request.GET.get("category", ""),
            condition_query=self.request.GET.get("condition", ""),
            order_by="-created_at"
        )

    def get_queryset(self) -> QuerySet[models.AdsItem]:
        """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        filter_params = self.get_filter_params()
        ads_service = services.AdsFilterService(filter_params)
        return ads_service.get_filtered_ads()

    def get_context_data(self, **kwargs):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        context = super().get_context_data(**kwargs)
        context.update(self.get_extra_context())
        return context


class AdsList(BaseAdsListView):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–∫—Ä–æ–º–µ —Å–≤–æ–∏—Ö)"""
    extra_context = {"title": "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤", }
    is_mine = False


class AdsUserList(LoginRequiredMixin, BaseAdsListView):
    """–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    extra_context = {"title": "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤", }
    is_mine = True


class AdsDetail(generic.DetailView):
    model = models.AdsItem
    template_name = "ads/ads_detail.html"


class AdsUpdate(LoginRequiredMixin, PermissionRequiredMixin, generic.UpdateView):
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    model = models.AdsItem
    form_class = forms.AdsItemForm
    template_name = 'ads/ads_form.html'
    permission_required = 'app_ads.change_adsitem'

    extra_context = {
        "title": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
        "categories": models.AdsItem.CATEGORY_CHOICES,
        "conditions": models.AdsItem.CONDITION_CHOICES
    }

    def get_object(self, queryset=None):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞."""
        obj = get_object_or_404(models.AdsItem, pk=self.kwargs.get('pk'))
        if obj.user != self.request.user:
            raise PermissionDenied("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
        return obj

    def form_valid(self, form):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã."""
        form.instance.user = self.request.user
        messages.add_message(
            self.request,
            messages.SUCCESS,
            '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ'
        )
        return super().form_valid(form)

    def get_context_data(self, **kwargs):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        context = super().get_context_data(**kwargs)
        context.update(self.extra_context)
        return context


class AdsDelete(LoginRequiredMixin, PermissionRequiredMixin, generic.DeleteView):
    """–ö–ª–∞—Å—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    model = models.AdsItem
    template_name = 'ads/ads_confirm_delete.html'
    success_url = reverse_lazy('app_ads:list_user')
    permission_denied_message = "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
    permission_required = 'app_ads.delete_adsitem'

    def test_func(self) -> bool:
        """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–≤–∞–ª –Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è."""
        user = self.request.user
        item = self.get_object()
        return True if user == item.user else False

    def get_object(self, queryset=None):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"""
        obj = get_object_or_404(models.AdsItem, pk=self.kwargs.get('pk'))
        if obj.user != self.request.user:
            messages.add_message(self.request, messages.ERROR, self.permission_denied_message)
            raise PermissionDenied( self.permission_denied_message)
        return obj

    def delete(self, request, *args, **kwargs):
        self.object = self.get_object()
        messages.add_message(self.request, messages.SUCCESS, '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ')
        return super().delete(request, *args, **kwargs)

    def get_context_data(self, **kwargs):
        """–î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        context = super().get_context_data(**kwargs)
        context['title'] = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è'
        return context
